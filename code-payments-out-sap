import pandas as pd
import numpy as np
import os

def processar_planilha_financeira(caminho_arquivo_entrada):
    """
    Processa uma planilha financeira para criar novas colunas, filtrar dados
    com base em critérios específicos e salvar o resultado em um novo arquivo.

    Args:
        caminho_arquivo_entrada (str): O caminho completo para o arquivo Excel de entrada.
    """
    # --- 1. Validação do Arquivo de Entrada ---
    if not os.path.exists(caminho_arquivo_entrada):
        print(f"ERRO: O arquivo não foi encontrado no caminho especificado:\n{caminho_arquivo_entrada}")
        return

    print(f"Iniciando o processamento do arquivo: {os.path.basename(caminho_arquivo_entrada)}...")

    try:
        # --- 2. Leitura da Planilha ---
        df_original = pd.read_excel(caminho_arquivo_entrada)
        df_processado = df_original.copy()

        # --- 3. Passo 1: Criar Coluna 'Nome do Banco' (Smart Copy Down) ---
        print("Passo 1: Criando a coluna 'Nome do Banco'...")
        coluna_a_nome = df_original.columns[0]
        coluna_c_nome = df_original.columns[2]
        coluna_d_nome = df_original.columns[3]

        coluna_banco = np.where(df_processado[coluna_a_nome] == 'Ativo', df_processado[coluna_d_nome], np.nan)
        coluna_banco_series = pd.Series(coluna_banco)
        coluna_banco_series.ffill(inplace=True)
        
        df_processado.insert(0, 'Nome do Banco', coluna_banco_series)
        df_processado.dropna(subset=[coluna_c_nome], inplace=True)
        df_processado = df_processado[df_processado[coluna_a_nome] != 'Ativo'].copy()

        # --- 4. Passo 2: Criar Coluna 'Tipo' ---
        print("Passo 2: Criando a coluna 'Tipo' a partir de 'Nº doc.'...")
        nome_coluna_doc = 'Nº doc.'
        if nome_coluna_doc in df_processado.columns:
            df_processado[nome_coluna_doc] = df_processado[nome_coluna_doc].astype(str)
            nova_coluna_tipo = df_processado[nome_coluna_doc].str[:2]
            posicao_insercao = df_processado.columns.get_loc(nome_coluna_doc) + 1
            df_processado.insert(posicao_insercao, 'Tipo', nova_coluna_tipo)
        else:
            print(f"AVISO: A coluna '{nome_coluna_doc}' não foi encontrada. A coluna 'Tipo' não será criada.")

        # --- 5. Passo 3: Remover Linhas por Banco ---
        print("Passo 3: Removendo linhas com base em bancos específicos...")
        bancos_para_excluir = [
            'BANCO BRADESCO AG. 26 CC. 28408-4',
            'BANCO BMP SOCIEDADE DE CRÉDITO AO MICROEMPREENDEDOR AG. 0001-8 CC. 83065-3',
            'TRAVELEX BANCO DE CAMBIO S.A. AG 0001 CC 4267-7',
            'BANCO DAYCOVAL S/A - AG. 00019 C.C 0015059253',
            'BANCO BMG - AG 0005 C.C 16378698-3',
            'BANCO XP AG. 001 C.C - 1195396-4',
            'MERCADO PAGO AG 0001 CC. 4585154333-3',
            'BANCO BMP SOCIEDADE DE CRÉDITO AO MICROEMPREENDEDOR AG. 0001 C.C 350690-4',
            'BANCO BMG S.A. AG 0005 CC 16378695-9',
            'BANCO DAYCOVAL S/A - AG. 00019 C.C 0006124803'
        ]
        df_processado = df_processado[~df_processado['Nome do Banco'].isin(bancos_para_excluir)]

        # --- 6. Passo 4: Remover Linhas pela lista de 'Nome conta contrap.' ---
        print("Passo 4: Removendo linhas com base na lista de 'Nome conta contrap.'...")
        nome_coluna_contrap_lista = 'Nome conta contrap.'
        contas_para_excluir = [
            'BANCO BRADESCO AG. 26 CC. 28408-4', 'BANCO BMP SOCIEDADE DE CRÉDITO AO MICROEMPREENDEDOR AG. 0001-8 CC. 83065-3',
            'TRAVELEX BANCO DE CAMBIO S.A. AG 0001 CC 4267-7', 'BANCO DAYCOVAL S/A - AG. 00019 C.C 0015059253',
            'BANCO BMG - AG 0005 C.C 16378698-3', 'BANCO XP AG. 0001 C.C - 1195396-4', 'MERCADO PAGO AG 0001 CC. 4585154333-3',
            'BANCO BMP SOCIEDADE DE CRÉDITO AO MICROEMPREENDEDOR AG. 0001 C.C 350690-4', 'BANCO BMG S.A. AG 0005 CC 16378695-9',
            'BANCO DAYCOVAL S/A - AG. 00019 C.C 0006124803', '(-) DEPÓSITOS A IDENTIFICAR', 'TARIFAS BANCÁRIAS',
            'SFT CI FUNDO DE INVESTIMENTO EM DIREITOS CREDITORIOS', 'SALÁRIOS A PAGAR', 'ADIANTAMENTO DE FÉRIAS',
            'VENDAS CANCELADAS', 'RWDM FUTURE S.A.', 'SALÁRIO', 'RENDIMENTO SOBRE APLIC. FINANCEIRAS',
            'RECUPERAÇÃO DE GASTOS', 'RECEITAS NACIONAIS', 'RECEITA COM MECANISMO DE SOLIDARIEDADE',
            'QUADRO MÓVEL', 'PARQUE DE ALIMENTAÇÃO', 'PAGAR.ME PAGAMENTOS S.A', 'LOCAÇÕES NO ESTÁDIO NILTON SANTOS',
            'LOCAÇÃO DE CAMAROTES', 'OLYMPIQUE LYONNAIS LTDA', 'IRRF S/ APLICAÇÃO FINANCEIRA', 'IRRF S/ CÂMBIO',
            'JUROS E MULTAS', 'INGRESSE - INGRESSOS PARA EVENTOS S.A', 'EVENTOS CORPORATIVOS E CONFRATERNIZAÇÕES',
            'ESTACIONAMENTO', 'ENCORE INVESTIMENTOS E SERVICOS FINANCEIROS LTDA', 'EAGLE FOOTBALL HOLDINGS BIDCO LIMITED',
            'DEVOLUÇÃO DE VENDAS', 'DESCONTOS OBTIDOS', 'CONFEDERACAO BRASILEIRA DE FUTEBOL',
            'CAIXA LOJA GENERAL SEVERIANO', 'CLIENTES VENDAS', 'ADIANTAMENTO DE 13º',
            'BANCO BTG PACTUAL - AG. 0001 C.C 005021395', 'BANCO BTG PACTUAL - CNPJ 0004 - AG. 0050 C.C 005642931',
            'BANCO SANTANDER AG. 3003 CC. 13032106-2', 'BANCO SANTANDER AG.3003.CC13032106-2',
            'BTG PACTUAL - CNPJ 0001 - AG 0001 C.C 502200-1', 'BTG PACTUAL - CNPJ 0001 - AG 0050 CC. 502139-5',
            'BTG PACTUAL AG 0001 CC. 5022001', 'BTG PACTUAL AG. 0001 CC. 5022001',
            'STONE INSTITUIÇÃO DE PAGAMENTO S.A. - CNPJ 0002 C.C - 22498109 - Campinas',
            'STONE INSTITUIÇÃO DE PAGAMENTO S.A. - CNPJ 0003 C.C - 98994262 - Barra Shopping',
            'STONE INSTITUIÇÃO DE PAGAMENTO S.A. - NAG.0001 C.C - 97918320 - Nilton Santos',
            'STONE INSTITUIÇÃO DE PAGAMENTO S.A. - NAG.0005 C.C - 93617520 - General Severiano',
            'ADYEN DO BRASIL INSTITUICAO DE PAGAMENTO LTDA.', 'ADIANTAMENTO PARA FUTURO AUMENTO DE CAPITAL - AFAC'
        ]
        if nome_coluna_contrap_lista in df_processado.columns:
            df_processado = df_processado[~df_processado[nome_coluna_contrap_lista].isin(contas_para_excluir)]
        else:
            print(f"AVISO: A coluna '{nome_coluna_contrap_lista}' não foi encontrada. A filtragem por lista de contas não será aplicada.")

        # --- 7. Passo 5: Remover Linhas onde 'Conta de contrapartida' começa com 'C' ---
        print("Passo 5: Removendo linhas onde 'Conta de contrapartida' começa com a letra 'C'...")
        nome_coluna_contrap_c = 'Conta de contrapartida'
        if nome_coluna_contrap_c in df_processado.columns:
            df_processado[nome_coluna_contrap_c] = df_processado[nome_coluna_contrap_c].astype(str)
            df_processado = df_processado[~df_processado[nome_coluna_contrap_c].str.startswith('C', na=False)]
        else:
            print(f"AVISO: A coluna '{nome_coluna_contrap_c}' não foi encontrada. A filtragem não será aplicada.")

        # --- 8. Passo 6: Filtrar Coluna 'Tipo' (Manter CP, LC, BT) ---
        print("Passo 6: Filtrando a coluna 'Tipo' para manter CP, LC e BT...")
        tipos_para_manter = ['CP', 'LC', 'BT']
        if 'Tipo' in df_processado.columns:
            df_processado = df_processado[df_processado['Tipo'].isin(tipos_para_manter)]
        else:
            print("AVISO: A coluna 'Tipo' não foi encontrada. A filtragem por tipo não será aplicada.")

        # --- 9. Passo 7: Remover Linhas por 'Observações' (Contrato de Câmbio) ---
        print("Passo 7: Removendo linhas que contenham 'Contrato de Câmbio' nas observações...")
        nome_coluna_obs = 'Observações'
        if nome_coluna_obs in df_processado.columns:
            df_processado[nome_coluna_obs] = df_processado[nome_coluna_obs].astype(str)
            df_processado = df_processado[~df_processado[nome_coluna_obs].str.contains('Contrato de Câmbio', case=False, na=False)]
        else:
            print(f"AVISO: A coluna '{nome_coluna_obs}' não foi encontrada. A filtragem por observação não será aplicada.")

        # --- 10. Passo 8: Remover Linhas por 'Observações' (Recebimento) ---
        print("Passo 8: Removendo linhas que contenham 'Recebimento' nas observações...")
        if nome_coluna_obs in df_processado.columns:
            df_processado = df_processado[~df_processado[nome_coluna_obs].str.contains('recebimento', case=False, na=False)]

        # --- 11. Salvando o Arquivo de Saída ---
        diretorio = os.path.dirname(caminho_arquivo_entrada)
        nome_base_arquivo = os.path.basename(caminho_arquivo_entrada)
        caminho_arquivo_saida = os.path.join(diretorio, f"output_processado_{nome_base_arquivo}")

        with pd.ExcelWriter(caminho_arquivo_saida, engine='openpyxl') as writer:
            df_processado.to_excel(writer, sheet_name='Dados_Processados', index=False)
        
        print("\n--- Processamento Concluído com Sucesso! ---")
        print(f"O novo arquivo foi salvo em:")
        print(caminho_arquivo_saida)

    except Exception as e:
        print(f"\nOcorreu um erro durante o processamento: {e}")
        print("Verifique se o arquivo não está aberto, se os nomes das colunas estão corretos e se o formato da planilha é o esperado.")


# --- Ponto de Partida do Script ---
if __name__ == '__main__':
    # IMPORTANTE: Coloque o caminho do seu arquivo aqui.
    caminho_do_meu_arquivo = r"C:\Users\ThiagoAlmeida\OneDrive - SAF Botafogo\Documentos\Minhas fontes de dados\Metas Financeiro\Razão 24 meta fin vcerto1.xlsx"
    
    # Chama a função principal para executar o processo.
    processar_planilha_financeira(caminho_do_meu_arquivo)
