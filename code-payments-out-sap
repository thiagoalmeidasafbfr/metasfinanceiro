import pandas as pd
import os
import numpy as np

# A biblioteca 'xlsxwriter' é usada como 'engine' do Pandas e não precisa de importação direta.

# --- Configuração ---
# Modifique esta seção para ajustar os arquivos, abas ou colunas.

# Caminho base para os arquivos de entrada e saída
PATH_BASE = r"C:\Users\ThiagoAlmeida\OneDrive - SAF Botafogo\General\Mapeamento de Obrigações Contratuais"
ARQUIVO_PASSIVOS = os.path.join(PATH_BASE, "Passivos - Obrigações dos Atletas V2.xlsx")
ARQUIVO_CONTRATOS = os.path.join(PATH_BASE, "MO - Contratos de Trabalho.xlsx")

# Lista de arquivos e suas respectivas abas a serem processadas
config_arquivos = [
    {
        "caminho_arquivo": ARQUIVO_CONTRATOS,
        "abas_a_ler": ["Salários"]
    },
    {
        "caminho_arquivo": ARQUIVO_PASSIVOS,
        "abas_a_ler": ["Direito de Imagem", "Luvas e Prêmios"]
    }
]

# Lista das colunas desejadas na tabela final consolidada.
colunas_finais_desejadas = [
    "ID Atleta", "Atleta", "Status do Jogador", "Posição",
    "Despesa", "Data Início", "Data Fim", "Valor", "Credor", "Vigente",
    "Moeda de Pagamento", "Balanço de variação cambial?", "Condição",
    "Detalhes da Condição", "Observações Importantes", "Vencimento",
    "Parcela(s)",
    "Bruto ou Líquido?", "Pgto Certo ou Condicional?",
    "Data de atingimento da meta"
]

# Nome do arquivo Excel de saída
arquivo_saida = os.path.join(PATH_BASE, "consolidado_obrigaçoes_v15.xlsx")

# Define quais despesas são recorrentes e devem ser expandidas
DESPESAS_RECORRENTES = ["CLT", "Imagem"]
# Define quais despesas são bônus
DESPESAS_BONUS = ['CLT - Bônus', 'Imagem - Bônus']


# --- Fim da Configuração ---


def expandir_parcelas_mensais(df_original):
    """
    Expande linhas de um DataFrame em parcelas mensais com base nas colunas 'Data Início' e 'Data Fim'.
    Esta função foi completamente reescrita para garantir precisão e clareza.
    """
    # Lista para armazenar todas as novas linhas geradas
    lista_linhas_finais = []

    for index, linha_original in df_original.iterrows():
        # 1. Ler as datas, forçando o formato dia/mês/ano (padrão no Brasil) para evitar erros de interpretação.
        data_inicio = pd.to_datetime(linha_original['Data Início'], dayfirst=True, errors='coerce')
        data_fim = pd.to_datetime(linha_original['Data Fim'], dayfirst=True, errors='coerce')
        despesa_atual = linha_original.get('Despesa', '')

        # 2. Validar se as datas são válidas e se o intervalo é lógico.
        if pd.isna(data_inicio) or pd.isna(data_fim) or data_inicio > data_fim:
            # Se as datas são inválidas, adiciona a linha original sem modificação para não perder dados.
            atleta = linha_original.get('Atleta', 'N/A')
            print(f"      - AVISO: Linha do atleta '{atleta}' (Despesa: '{despesa_atual}') não será expandida por falta de datas válidas.")
            lista_linhas_finais.append(linha_original)
            continue

        # 3. Gerar a lista de parcelas usando um loop 'while' para máxima precisão.
        # Este método evita os problemas de interpretação da função pd.date_range.
        parcelas_datas = []
        # Começa no primeiro dia do mês da data de início.
        data_corrente = data_inicio.replace(day=1)
        while data_corrente <= data_fim:
            parcelas_datas.append(data_corrente)
            # Avança para o primeiro dia do próximo mês.
            data_corrente = (data_corrente + pd.DateOffset(months=1)).replace(day=1)

        # Se o loop não gerar nenhuma parcela, a linha original não é expandida.
        if not parcelas_datas:
            lista_linhas_finais.append(linha_original)
            continue
            
        total_parcelas = len(parcelas_datas)

        # 4. Iterar sobre cada data de início de parcela para criar as novas linhas.
        for i, data_inicio_parcela in enumerate(parcelas_datas, 1):
            nova_linha = linha_original.copy()

            # Define o 'Data Início' e 'Data Fim' da parcela.
            nova_linha['Data Início'] = data_inicio_parcela
            nova_linha['Data Fim'] = data_inicio_parcela + pd.offsets.MonthEnd(1)

            # Lógica de vencimento customizada.
            vencimento = data_inicio_parcela 
            if despesa_atual == "CLT":
                vencimento = (data_inicio_parcela + pd.DateOffset(months=1)).replace(day=5)
            elif despesa_atual == "Imagem":
                vencimento = (data_inicio_parcela + pd.DateOffset(months=1)).replace(day=20)
            
            nova_linha['Vencimento'] = vencimento
            
            # Adiciona a numeração da parcela.
            nova_linha['Parcela(s)'] = f"{i}/{total_parcelas}"
            
            lista_linhas_finais.append(nova_linha)

    # 5. Retorna um novo DataFrame com todas as linhas processadas.
    if not lista_linhas_finais:
        return df_original

    return pd.DataFrame(lista_linhas_finais).reset_index(drop=True)


def aplicar_bonus(df_pagamentos_expandido, df_bonus):
    """
    Aplica os valores de bônus aos pagamentos recorrentes já expandidos.
    """
    if df_bonus.empty:
        print("    - Nenhuma linha de bônus encontrada para aplicar.")
        return df_pagamentos_expandido

    print("    -> Iniciando aplicação de bônus...")
    df_ajustado = df_pagamentos_expandido.copy()

    df_ajustado['Valor'] = pd.to_numeric(df_ajustado['Valor'], errors='coerce').fillna(0)
    df_ajustado['Data Início'] = pd.to_datetime(df_ajustado['Data Início'], errors='coerce', dayfirst=True)
    df_bonus['Valor'] = pd.to_numeric(df_bonus['Valor'], errors='coerce').fillna(0)
    df_bonus['Data Início'] = pd.to_datetime(df_bonus['Data Início'], errors='coerce', dayfirst=True)

    for _, linha_bonus in df_bonus.iterrows():
        atleta_bonus = linha_bonus['Atleta']
        valor_bonus = linha_bonus['Valor']
        data_inicio_bonus = linha_bonus['Data Início']
        despesa_bonus = linha_bonus['Despesa']

        despesa_alvo = ''
        if despesa_bonus == 'CLT - Bônus':
            despesa_alvo = 'CLT'
        elif despesa_bonus == 'Imagem - Bônus':
            despesa_alvo = 'Imagem'
        
        if not despesa_alvo or pd.isna(data_inicio_bonus) or valor_bonus == 0 or pd.isna(atleta_bonus):
            continue
        
        print(f"       - Aplicando bônus de {valor_bonus:.2f} para '{atleta_bonus}' na despesa '{despesa_alvo}' a partir de {data_inicio_bonus.strftime('%d/%m/%Y')}.")

        mascara_update = (
            (df_ajustado['Atleta'] == atleta_bonus) &
            (df_ajustado['Despesa'] == despesa_alvo) &
            (df_ajustado['Data Início'] >= data_inicio_bonus)
        )
        df_ajustado.loc[mascara_update, 'Valor'] += valor_bonus
        
    print("    -> Aplicação de bônus concluída.")
    return df_ajustado


def consolidar_planilhas(config_arquivos_param, colunas_desejadas_param, arquivo_saida_param):
    """
    Orquestra a leitura, expansão, cálculo de bônus e salvamento dos dados.
    """
    lista_df_todas_abas = []
    print("Iniciando consolidação das planilhas...")

    # ETAPA 1: Carrega todos os dados de todas as abas e classifica a despesa
    for config in config_arquivos_param:
        caminho = config["caminho_arquivo"]
        if not os.path.exists(caminho):
            print(f"\nAVISO: Arquivo não encontrado: {caminho}. Pulando.")
            continue
        print(f"\nProcessando arquivo: {os.path.basename(caminho)}")
        for aba in config["abas_a_ler"]:
            print(f"  Lendo aba: '{aba}'...")
            try:
                df = pd.read_excel(caminho, sheet_name=aba, dtype=str).dropna(how='all')
                if not df.empty:
                    df['Arquivo Origem'] = os.path.basename(caminho)
                    df['Aba Origem'] = aba
                    
                    despesa_padrao = aba
                    if aba == 'Salários':
                        despesa_padrao = 'CLT'
                    elif aba == 'Direito de Imagem':
                        despesa_padrao = 'Imagem'

                    if 'Despesa' not in df.columns:
                        df['Despesa'] = despesa_padrao
                    else:
                        df['Despesa'].replace(r'^\s*$', np.nan, regex=True, inplace=True)
                        df['Despesa'].fillna(despesa_padrao, inplace=True)
                            
                    lista_df_todas_abas.append(df)
            except Exception as e:
                print(f"    ERRO ao processar a aba '{aba}': {e}")

    if not lista_df_todas_abas:
        print("\nNenhum dado foi processado.")
        return
    
    # ETAPA 2: Classifica os dados em grupos: Recorrentes, Bônus e Únicos
    df_completo = pd.concat(lista_df_todas_abas, ignore_index=True)
    
    df_recorrentes = df_completo[df_completo['Despesa'].isin(DESPESAS_RECORRENTES)].copy()
    df_bonus = df_completo[df_completo['Despesa'].isin(DESPESAS_BONUS)].copy()
    
    despesas_processadas = DESPESAS_RECORRENTES + DESPESAS_BONUS
    df_unicos = df_completo[~df_completo['Despesa'].isin(despesas_processadas)].copy()

    # --- DIAGNÓSTICO DE CLASSIFICAÇÃO ---
    print("\n--- Diagnóstico de Classificação de Despesas ---")
    print(f"Total de linhas carregadas: {len(df_completo)}")
    print("\nContagem de despesas RECORRENTES (para expansão):")
    print(df_recorrentes['Despesa'].value_counts().to_string())
    print("\nContagem de despesas de BÔNUS:")
    print(df_bonus['Despesa'].value_counts().to_string())
    print("\nContagem de despesas de PAGAMENTO ÚNICO:")
    print(df_unicos['Despesa'].value_counts().to_string())
    print("--------------------------------------------\n")
    
    # ETAPA 3: EXPANSÃO DAS DESPESAS RECORRENTES (PRIMEIRA AÇÃO)
    print("Expandindo despesas mensais (CLT, Imagem)...")
    df_recorrentes_expandido = expandir_parcelas_mensais(df_recorrentes)
    
    # ETAPA 4: APLICAÇÃO DOS BÔNUS SOBRE AS LINHAS JÁ EXPANDIDAS
    df_final_recorrente = aplicar_bonus(df_recorrentes_expandido, df_bonus)

    # ETAPA 5: Lógica para pagamentos únicos ("Luvas e Prêmios")
    if not df_unicos.empty:
        if 'Valor em reais' in df_unicos.columns:
            if 'Valor' not in df_unicos.columns:
                df_unicos.rename(columns={'Valor em reais': 'Valor'}, inplace=True)
            else:
                valor_existente = pd.to_numeric(df_unicos['Valor'], errors='coerce')
                valor_novo = pd.to_numeric(df_unicos['Valor em reais'], errors='coerce')
                df_unicos['Valor'] = valor_existente.combine_first(valor_novo)
                df_unicos.drop(columns=['Valor em reais'], inplace=True)
        
        if 'Vencimento' in df_unicos.columns:
            venc_dt = pd.to_datetime(df_unicos['Vencimento'], errors='coerce', dayfirst=True)
            df_unicos['Data Início'] = venc_dt.apply(lambda dt: dt.replace(day=1) if pd.notna(dt) else pd.NaT)
            df_unicos['Data Fim'] = venc_dt.apply(lambda dt: dt + pd.offsets.MonthEnd(0) if pd.notna(dt) else pd.NaT)
            df_unicos['Parcela(s)'] = '1/1'

    # ETAPA 6: Junta tudo para o resultado final
    print("\nConcatenando todos os dados processados...")
    df_consolidado = pd.concat([df_final_recorrente, df_unicos, df_bonus], ignore_index=True)

    # ETAPA 7: Reorganiza e formata o DataFrame final
    colunas_finais_com_origem = colunas_desejadas_param + ['Arquivo Origem', 'Aba Origem']
    df_consolidado = df_consolidado.reindex(columns=colunas_finais_com_origem)
    df_consolidado = df_consolidado.fillna('')

    if 'Moeda de Pagamento' in df_consolidado.columns:
         df_consolidado['Moeda de Pagamento'] = df_consolidado['Moeda de Pagamento'].apply(lambda x: 'BRL' if str(x).strip() == '' else x)

    # ETAPA 8: Salva o arquivo Excel
    try:
        print(f"\nSalvando dados consolidados em '{arquivo_saida_param}'...")
        with pd.ExcelWriter(arquivo_saida_param, engine='xlsxwriter', datetime_format='dd/mm/yyyy', date_format='dd/mm/yyyy') as writer:
            df_consolidado.to_excel(writer, sheet_name='Consolidado', index=False, na_rep='')
            
            workbook = writer.book
            worksheet = writer.sheets['Consolidado']

            formato_data = workbook.add_format({'num_format': 'dd/mm/yyyy'})
            header_format = workbook.add_format({'bold': True, 'bg_color': '#D9E1F2', 'border': 1})

            for col_num, value in enumerate(df_consolidado.columns.values):
                worksheet.write(0, col_num, value, header_format)

            header = list(df_consolidado.columns)
            col_indices = {name: i for i, name in enumerate(header)}
            
            for col_name in ["Data Início", "Data Fim", "Vencimento", "Data de atingimento da meta"]:
                if col_name in col_indices:
                    worksheet.set_column(col_indices[col_name], col_indices[col_name], 12, formato_data)

            if 'Valor' in col_indices and 'Moeda de Pagamento' in col_indices:
                idx_col_valor = col_indices['Valor']
                formato_brl = workbook.add_format({'num_format': 'R$ #,##0.00;[Red]-R$ #,##0.00'})
                formato_usd = workbook.add_format({'num_format': 'US$ #,##0.00;[Red]-US$ #,##0.00'})
                formato_eur = workbook.add_format({'num_format': '€ #,##0.00;[Red]-€ #,##0.00'})
                formato_geral = workbook.add_format({'num_format': '#,##0.00;[Red]-#,##0.00'})

                valores_numericos = pd.to_numeric(df_consolidado['Valor'], errors='coerce')
                
                for row_num, valor_numerico in enumerate(valores_numericos):
                    if pd.notna(valor_numerico):
                        moeda_atual = str(df_consolidado.at[row_num, 'Moeda de Pagamento']).strip().upper()
                        formato_moeda = formato_geral
                        if moeda_atual in ['', 'NAN', 'BRL', 'REAL']: formato_moeda = formato_brl
                        elif moeda_atual == 'USD': formato_moeda = formato_usd
                        elif moeda_atual == 'EUR': formato_moeda = formato_eur
                        worksheet.write_number(row_num + 1, idx_col_valor, valor_numerico, formato_moeda)

            for i, col_nome in enumerate(df_consolidado.columns):
                 max_len_calc = df_consolidado[col_nome].astype(str).map(len).max()
                 if pd.isna(max_len_calc): max_len_calc = 0
                 max_len = max(max_len_calc, len(str(col_nome))) + 2
                 worksheet.set_column(i, i, min(max_len, 50))
                 
        print(f"\nConsolidação concluída! Arquivo salvo em: {os.path.abspath(arquivo_saida_param)}")

    except Exception as e:
        print(f"\nERRO CRÍTICO ao salvar o arquivo de saída: {e}")
        import traceback
        print(traceback.format_exc())

# --- Execução Principal ---
if __name__ == "__main__":
    consolidar_planilhas(config_arquivos, colunas_finais_desejadas, arquivo_saida)
